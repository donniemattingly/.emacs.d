;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

(") ))" "0" "(not= 0)" "(take 20 (collatz 13))" "(dorun (collatz 13))" "(collatz 13)" "(take 10 (collatz 13))" "(collatz 13)" "(parse-int (apply str (prob13!)))" "(apply str (prob13!))" "(str (prob13!))" "(prob13!)" "prob13numbers" "(prob13numbers)" "((comp count factors) 76576500)" "(prob12!)" "(>= 500 (count (factors 76564125)))" "(count (factors 76564125))" "(factors 76564125)" "(prob12!)" "(count (factors 76564125))" "(factors 76564125)" "(prob12!)" "(factors 100)" "(factors 15)" "(mod 11 5)" "(rem 11 5)" "(rem 10 5)" "(int (Math/ceil (Math/sqrt 11)))" "(Math/ceil (Math/sqrt 11))" "(Math/sqrt 11)" "(take 5 (tri-numbers))" "(range 0 1)" "(take 5 (tri-numbers))" "(prob11!)" "[(first (get-matrix-coords 5))]" "(vec (first (get-matrix-coords 5)))" "(first (get-matrix-coords 5))" "(vector first (get-matrix-coords 20))" "(prob11!)" "(filter valid-coords? (get-directional-coords [0 0]))" "(prob11!)" "(filter valid-coords? (get-directional-coords [0 0]))" "(map valid-coords? (get-directional-coords [0 0]))" "(get-directional-coords [0 0])" "(filter valid-coords? (reduce into [] (get-directional-coords [0 0])))" "(reduce into [] (get-directional-coords [0 0]))" "(get-directional-coords [0 0])" "[(+ 1 2) (+ 1 3)]" "(get-directional-coords [0 0])" "(get-directional-coords 0 0)" "(count (filter valid-coords? (map #(apply get-horz-coords %) (get-matrix-coords 20))))" "prob11grid" "(string/split \"test,one,two,thee\" #\",\")" "prob11grid" "(count (filter valid-coords? (map #(apply get-horz-coords %) (get-matrix-coords 20))))" "(count (map #(apply get-horz-coords %) (get-matrix-coords 20)))" "(count (map #(apply get-horz-coords %) (get-matrix-coords 4)))" "(filter valid-coords? (map #(apply get-horz-coords %) (get-matrix-coords 4)))" "(map #(apply get-horz-coords %) (get-matrix-coords 4))" "(map (comp apply get-horz-coords) (get-matrix-coords 4))" "(map (apply str) (get-matrix-coords 4))" "(map (apply get-horz-coords) (get-matrix-coords 4))" "(map (apply get-horz-coords (get-matrix-coords 4)))" "(map get-horz-coords (get-matrix-coords 4))" "(get-matrix-coords 5)" "(get-product [2 3] [[0 0] [0 1]])" "(get-at [2 3] 0 1 2)" "(get-at [2 3] 1 0 2)" "(get-at [2 3] 0 1 2)" "(get-at [2 3] 0 0 2)" "(get-product [2 3] [[0 0] [0 1]])" "(valid-coords? (get-matrix-coords 20))" "(get-matrix-coords 20)" "(valid-coords? [[2 2] [20 1]])" "(valid-coords? [[2 2] [2 1]])" "(valid-coords? [20 20])" "(valid-coords? [2 21])" "(valid-coords [2 21])" "(valid-coords? [10 12])" "(valid-coords? [21 1])" "(valid-coords? [2 2])" "(count (get-matrix-coords 20))" "(get-matrix-coords 20)" "(not-any? #(<= 15 %) [1 2 3 4 16])" "(get-matrix-coords 20)" "(reduce into [] [[1 2 3] [4 5 6]])" "(into [] [1 2 3 4 5])" "(get-matrix-coords 20)" "(not-any? #(<= 15 %) [1 2 3 4 16])" "(not-any? #(< 16 %) [1 2 3 4 16])" "(not-any? #(<= 16 %) [1 2 3 4 16])" "(not-any? #(<= 16 %) [1 2 3 4])" "(not-any? #(<= 16 %) [1 2 3 4 20 21])" "(not-any? #(> % 20) [1 2 3 4 20 21])" "(not-any? #(> % 20) [1 2 3 4 20])" "(not-any? #(> % 20) [1 2 3 4])" " % 20) [1 2 3 4])" "(not-any? #(< % 20) [1 2 3 4])" "(every? (partial 2 >) [1 1 1])" "(every? (partial 2 >) 2 1 3)" "(filter #(every? (partial 2 >) %) [[1 1] [1 2] [1 3]])" "(filter #(every? (partial 2 >)) [[1 1] [1 2] [1 3]])" "(filter #(every? (partial 2 >)) [1 1] [1 2] [1 3])" "(get-matrix-coords 20)" "(get-matrix-coords 10)" "(map #(map % (range 0 10)) (map #(partial vector %) (range 0 10)))" "(map #(partial vector %) (range 0 10))" "(testfn 2)" "(testfn 1)" "(testfn 0)" "(def testfn (partial vector 0))" "(partial vector 0)" "(map #(vector 0 %) [0 1 2 3 4 5 6])" "(get-left-diag-coords 4 0)" "(get-right-diag-coords 0 0)" "(get-vert-coords 0 0)" "(get-vert-coords [0 0])" "(get-horz-coords 2 2)" "(get-horz-coords 0 0)" "(map #(vector % 8) (range 0 10))" "(into [] 8)" "(concat 1 2)" "(concat x y)" "(map #(seq %1 %2) (range 1 11) (take 10 (repeat 0)))" "(map #([%1 %2]) (range 1 11) (take 10 (repeat 0)))" "(map conj (range 1 10) (take 9 (repeat 10)))" "(map cons (range 1 10) (take 9 (repeat 10)))" "(get-at [1 2 3 4 5 6 7 8 9] 0 2 3)" "(get-at [1 2 3 4 5 6 7 8 9] 0 0 3)" "(get-at [1 2 3 4 5 6 7 8 9] 2 2 3)" "(nth [1 2 3 4] 2)" "(nth 2 [1 2 3 4])" "(get-rows [1 2 3 4 5 6])" "(get-rows list)" "(map #(take 4 (nthnext list %)) (range 0 (- (count list) 3)))" "list" "(map #(take 4 (nthnext list %)) (range 0 (- (count list) 3)))" "list" "(def list (range 0 100))" "(map #(take 4 (nthnext [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18] %)) (range 0 ))" "(map #(take 4 (nthnext [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18] %)) (range 0 14))" "(map #(take 4 (nthnext [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18])) (range 0 14))" "(take 4 (nthnext [1 2 3 4] 0))" "(map identity [[1 2 3 4] [5 6 7 8] [9 10 11 12] [13 14 15 16]])" "(map println [[1 2 3 4] [5 6 7 8] [9 10 11 12] [13 14 15 16]])")